from typing import Any, Generator
from Produto import Produto


class Estoque:
    def __init__(self):
        """
        Inicializa um novo estoque vazio, utilizando um dicionÃ¡rio
        onde as chaves sÃ£o os nomes dos produtos (em letras minÃºsculas)
        e os valores sÃ£o instÃ¢ncias da classe Produto.
        """
        self.produtos = {}

    def adicionar_produto(self, nome:str, preco:float, quantidade:int=1) -> None:
        """
        Adiciona um produto ao estoque. Se o produto jÃ¡ existir (mesmo nome, case-insensitive),
        sua quantidade serÃ¡ incrementada. Caso contrÃ¡rio, ele serÃ¡ criado com a quantidade informada.

        ParÃ¢metros:
            nome (str): Nome do produto.
            preco (float): PreÃ§o do produto.
            quantidade (int, opcional): Quantidade a ser adicionada (padrÃ£o = 1).
        """
        novo:Produto = Produto(nome, preco, quantidade)
        chave = nome.lower()  # usa o nome em minÃºsculas como chave para consistÃªncia

        # Se o produto ainda nÃ£o existe, cria uma entrada com quantidade 0
        self.produtos.setdefault(chave, Produto(nome, preco, 0))

        # Usa o mÃ©todo __iadd__ da classe Produto para somar quantidades
        self.produtos[chave] += novo

        print(f"ðŸ“¦ Produto atualizado/adicionado: {nome}")
    
    def remover_produto(self, nome:str, quantidade:int=1) -> None:
        """
        Remove um produto do estoque . Se o produto jÃ¡ existir (mesmo nome, case-insensitive),
        sua quantidade serÃ¡ decrementada. Caso contrÃ¡rio, ele serÃ¡ criado com a quantidade informada
        
        ParÃ¢metros:
            nome (str): Nome do produto.
            preco (float): PreÃ§o do produto.
            quantidade (int, opcional): Quantidade a ser adicionada (padrÃ£o = 1).
        """ 
        chave = nome.lower()  # usa o nome em minÃºsculas como chave para consistÃªncia
        novo = Produto(nome, self.produtos[chave].preco, quantidade)

        if chave in self.produtos and self.produtos[chave].quantidade > 0:
            if self.produtos[chave].quantidade - novo.quantidade < 0:
                print("A quantidade do produto supera a quantidade em estoque informe uma nova quantidade")
            else:
                # Usa o mÃ©todo __isub__ da classe Produto para subtrair quantidades
                self.produtos[chave] -= novo
        else:
            print(f"Produto {nome} nÃ£o encontrado ou quantidade insuficiente")

    def listar(self) -> Generator[str, Any, None]:
        """
        Lista todos os produtos no estoque com suas quantidades e preÃ§os.

        Retorna:
            generator: Um gerador de strings formatadas com as informaÃ§Ãµes dos produtos.
        """
        print("\nðŸ“¦ Produtos no estoque:")
        for produto in self.produtos.values():
            yield f"â€¢ {produto}"
